@page "/event/{EventId}/supplier/{Id}"
@using EventPlanner.Models
@using EventPlanner.Data
@using System.IO
@using EventPlanner.Models.ModelView
@inject IJSRuntime JS
@inject EventService EventService
@inject SupplierService SupplierService
@inject SupplierTypeService SupplierTypeService;
@inject AttachmentService attachmentService
@inject NavigationManager NavigationManager
@inject AppState AppState
<Loading IsLoading="AppState.IsLoading" />

<div class="title-action">
    <MudText Typo="Typo.h2">Edit Supplier</MudText>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Filled.Close" Color="Color.Transparent" OnClick="Cancel"> Cancel</MudButton>
</div>

@if (Event is null || obj is null || Types is null)
{
    <Loading IsLoading="true" />
}
else
{
    <EditForm Model="@obj" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h4">Event</MudText>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Event Type" Variant="Variant.Outlined" @bind-Value="Event.Type" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Event Date" Variant="Variant.Outlined" @bind-Value="Event.Date" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Event Celebrants" Variant="Variant.Outlined" @bind-Value="Event.Celebrants" ReadOnly="true" />
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h4">Supplier</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect T="SupplierType" Label="Type" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" ReadOnly="true" @bind-Value="obj.Type" For="@(() => obj.Type)">
                            @foreach (var et in Types)
                            {
                                <MudSelectItem Value="@et">@et.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Label="Name" Variant="Variant.Outlined" @bind-Value="obj.Name" For="@(() => obj.Name)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Contact Person" Variant="Variant.Outlined" @bind-Value="obj.ContactPerson" For="@(() => obj.ContactPerson)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Mobile" Variant="Variant.Outlined" @bind-Value="obj.Mobile" For="@(() => obj.Mobile)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Email" Variant="Variant.Outlined" @bind-Value="obj.Email" For="@(() => obj.Email)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudCheckBox Label="Requires Down Payment" @bind-Checked="@obj.DownPaymentRequired"></MudCheckBox>
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="Package Price" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.PackagePrice" For="@(() => obj.PackagePrice)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="Discount" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.Discount" For="@(() => obj.Discount)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="Other Payments" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.OtherPayments" For="@(() => obj.OtherPayments)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="1st Down Payment" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.FirstDownPayment" For="@(() => obj.FirstDownPayment)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="2nd Down Payment" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.SecondDownPayment" For="@(() => obj.SecondDownPayment)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="3rd Down Payment" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.ThirdDownPayment" For="@(() => obj.ThirdDownPayment)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="Total Down" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.TotalDown" For="@(() => obj.TotalDown)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField Label="Balance" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.Balance" For="@(() => obj.Balance)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudIcon Icon="@Icons.Filled.AttachFile" class="mr-3"></MudIcon>
                                        <MudText>Files (@obj.Attachments.Count)</MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <div class="title-action">
                                        <MudText></MudText>
                                        <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />
                                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.FileUpload" for="fileInput">Upload Files</MudButton>
                                    </div>
                                    @if (obj.Attachments != null)
                                    {
                                        <MudText Typo="@Typo.h6">@obj.Attachments.Count() File@(obj.Attachments.Count() == 1 ? "" : "s"):</MudText>
                                        <MudList>
                                            @foreach (var attachment in obj.Attachments)
                                            {
                                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@attachment">
                                                    <MudItem>
                                                        @attachment.Name
                                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="@(e => DeleteAttachment(@attachment))"></MudIconButton>
                                                        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Primary" @onclick="@(e => DownloadAttachment(@attachment))"></MudIconButton>
                                                    </MudItem>
                                                </MudListItem>
                                            }
                                        </MudList>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Filled.Save" Class="ml-auto">Save</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}

@code {
    [Parameter]
    public string EventId { get; set; }
    [Parameter]
    public string Id { get; set; }
    EventDataView Event = null;
    BaseEvent BaseEvent = null;
    Supplier obj = new Supplier();
    IEnumerable<SupplierType> Types { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Types = await Task.Run(() => SupplierTypeService.GetAll());
        Event = await Task.Run(() => EventService.GetOneData(Guid.Parse(EventId)));
        BaseEvent = await Task.Run(() => EventService.GetOne<BaseEvent>(Guid.Parse(EventId)));
        obj = await Task.Run(() => SupplierService.GetOne(Guid.Parse(Id)));
    }

    async Task Update()
    {
        await AppState.RunAsync(async () =>
        {
            obj.Event = BaseEvent;
            await SupplierService.UpdateOne(obj);
            NavigationManager.NavigateTo($"/event/{EventId}/suppliers");
        });
    }

    void Cancel()
        => NavigationManager.NavigateTo($"/event/{EventId}/suppliers", true);

    IList<IBrowserFile> files = new List<IBrowserFile>();
    async Task UploadFiles(InputFileChangeEventArgs e)
    {
        await AppState.RunAsync(async () =>
        {
            foreach (var file in e.GetMultipleFiles())
            {
                files.Add(file);
            }
            await attachmentService.UpdateFiles<Supplier>(obj.Id, files);
            files.Clear();
        });
    }

    async Task DeleteAttachment(Attachment attachment)
    {
        await AppState.RunAsync(async () =>
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                await attachmentService.DeleteFile(attachment);
            }
        });
    }

    async Task DownloadAttachment(Attachment attachment)
    {
        await AppState.RunAsync(async () =>
        {
            var fileByteArr = await attachmentService.GetFileByteArray(attachment);
            await JS.InvokeVoidAsync("downloadFromByteArray", fileByteArr, attachment.Name);
        });
    }
}
