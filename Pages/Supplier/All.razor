@page "/event/{EventId}/suppliers"
@using EventPlanner.Models
@using EventPlanner.Models.ModelView
@using EventPlanner.Data
@inject IJSRuntime JS
@inject EventService EventService
@inject SupplierService SupplierService
@inject NavigationManager NavigationManager
@inject AppState AppState
<Loading IsLoading="AppState.IsLoading" />

<div class="title-action">
    <MudText Typo="Typo.h2">Suppliers</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Transparent" StartIcon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="Back" Class="ml-auto">Back to Event</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="New" Class="ml-2">New Supplier</MudButton>
</div>

@if (Suppliers is null)
{
    <Loading IsLoading="true" />
}
else
{
    <MudCard>
        <MudCardHeader>
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h4">Event</MudText>
                </MudItem>
                @if (Event.Type is not null)
                {
                    <MudItem xs="4">
                        <MudTextField Label="Event Type" Variant="Variant.Outlined" @bind-Value="Event.Type" ReadOnly="true" />
                    </MudItem>
                }
                <MudItem xs="4">
                    <MudTextField Label="Event Date" Variant="Variant.Outlined" @bind-Value="Event.Date" ReadOnly="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Event Celebrants" Variant="Variant.Outlined" @bind-Value="Event.Celebrants" ReadOnly="true" />
                </MudItem>
            </MudGrid>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.h4">Suppliers</MudText>
            <MudTable Items="@Suppliers" OnRowClick="Edit" T="Models.Supplier" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Contact Person</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Package Price</MudTh>
                    <MudTh>Balance</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="TypeName">@context.Type.Name</MudTd>
                    <MudTd DataLabel="Mobile">@context.Mobile</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="PackagePrice">₱@context.PackagePrice</MudTd>
                    <MudTd DataLabel="Balance">₱@context.Balance</MudTd>
                    <MudTd DataLabel="Delete" class="fit">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="ma-2" @onclick="@(e => Delete(@context))"></MudIconButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    public string EventId { get; set; }
    EventDataView Event = null;
    IEnumerable<Models.Supplier> Suppliers;

    protected override async Task OnInitializedAsync()
    {
        Event = await Task.Run(() => EventService.GetOneData(Guid.Parse(EventId)));
        Suppliers = await Task.Run(() => SupplierService.GetAll(Guid.Parse(EventId)));
    }

    async Task Delete(Models.Supplier Supplier)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await AppState.RunAsync(async () =>
            {
                await SupplierService.DeleteOne(Supplier);
                NavigationManager.NavigateTo($"/event/{EventId}/suppliers", true);
            });
        }
    }

    protected void Back()
        => NavigationManager.NavigateTo($"/event/{EventId}", true);

    protected void New()
        => NavigationManager.NavigateTo($"/event/{EventId}/supplier", true);

    private void Edit(TableRowClickEventArgs<Models.Supplier> args)
        => NavigationManager.NavigateTo($"/event/{EventId}/supplier/{args.Item.Id}", true);
    }
