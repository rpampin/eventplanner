@page "/supplier-types"
@using EventPlanner.Models
@using EventPlanner.Data
@inject SupplierTypeService supplierTypeService
@inject NavigationManager NavigationManager

<div class="title-action">
    <MudText Typo="Typo.h2">Supplier Types</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="New">New Supplier Type</MudButton>
</div>

@if (Types is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <MudTable Items="@Types" OnRowClick="Edit" T="SupplierType" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Delete" class="fit">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="ma-2" @onclick="@(e => Delete(@context))"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    IEnumerable<SupplierType> Types = null;

    protected override async Task OnInitializedAsync()
    {
        Types = await Task.Run(() => supplierTypeService.GetAll());
    }

    protected async void Delete(SupplierType evType)
    {
        await supplierTypeService.DeleteOne(evType);
        NavigationManager.NavigateTo("supplier-types", true);
    }

    protected void New()
        => NavigationManager.NavigateTo("supplier-type", true);

    private void Edit(TableRowClickEventArgs<SupplierType> args)
        => NavigationManager.NavigateTo("supplier-type/" + args.Item.Id, true);

}
