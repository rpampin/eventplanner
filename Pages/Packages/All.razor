@page "/packages"
@using EventPlanner.Models
@using EventPlanner.Data
@inject PackageService packageService
@inject NavigationManager NavigationManager

<div class="title-action">
    <MudText Typo="Typo.h2">Packages</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="New">New Package</MudButton>
</div>

@if (Types is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <MudTable Items="@Types" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Edit" class="fit">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" Class="ma-2" @onclick="@(e => Edit(@context.Id))"></MudIconButton>
            </MudTd>
            <MudTd DataLabel="Delete" class="fit">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="ma-2" @onclick="@(e => Delete(@context))"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    IEnumerable<Package> Types = null;

    protected override async Task OnInitializedAsync()
    {
        Types = await Task.Run(() => packageService.GetAll());
    }

    protected async void Delete(Package type)
    {
        await packageService.DeleteOne(type);
        NavigationManager.NavigateTo("packages", true);
    }

    protected void New()
        => NavigationManager.NavigateTo("package", true);

    protected void Edit(Guid Id)
        => NavigationManager.NavigateTo("package/" + Id, true);

}
