@page "/event/{Id}"
@using Syncfusion.Blazor.RichTextEditor
@using EventPlanner.Models
@using EventPlanner.Data
@using System.IO
@inject IJSRuntime JS
@inject EventService eventService
@inject EventTypeService eventTypeService
@inject PackageService packageService
@inject AttachmentService attachmentService
@inject ReportService ReportService
@inject EmailService EmailService
@inject NavigationManager NavigationManager

<div class="title-action">
    <MudText Typo="Typo.h2">Edit Event</MudText>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Filled.Close" Color="Color.Transparent" OnClick="Cancel"> Cancel</MudButton>
</div>

@if (Types is null || Packages is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <EditForm Model="@obj" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="6">
                        <MudSelect T="EventType" Label="Type" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" ReadOnly="true" @bind-Value="obj.Type" For="@(() => obj.Type)">
                            @foreach (var et in Types)
                            {
                                <MudSelectItem Value="@et">@et.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudDatePicker Label="Date" Variant="Variant.Outlined" @bind-Date="obj.Date" For="@(() => obj.Date)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudDatePicker Label="PreparationVenue" Variant="Variant.Outlined" @bind-Date="obj.PreparationVenue" For="@(() => obj.PreparationVenue)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTimePicker Label="PreparationTime" Variant="Variant.Outlined" @bind-Time="obj.PreparationTime" For="@(() => obj.PreparationTime)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudDatePicker Label="ReceptionVenue" Variant="Variant.Outlined" @bind-Date="obj.ReceptionVenue" For="@(() => obj.ReceptionVenue)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTimePicker Label="ReceptionTime" Variant="Variant.Outlined" @bind-Time="obj.ReceptionTime" For="@(() => obj.ReceptionTime)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Celebrant" Variant="Variant.Outlined" @bind-Value="obj.Celebrant" For="@(() => obj.Celebrant)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField Label="Address" Variant="Variant.Outlined" @bind-Value="obj.Address" For="@(() => obj.Address)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField Label="Mobile" Variant="Variant.Outlined" @bind-Value="obj.Mobile" For="@(() => obj.Mobile)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField Label="Email" Variant="Variant.Outlined" @bind-Value="obj.Email" For="@(() => obj.Email)" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField Label="Social" Variant="Variant.Outlined" @bind-Value="obj.Social" For="@(() => obj.Social)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect T="Package" Label="Package" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" @bind-Value="obj.Package" For="@(() => obj.Package)">
                            @foreach (var p in Packages)
                            {
                                <MudSelectItem Value="@p">@p.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudNumericField Label="PackagePrice" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.PackagePrice" For="@(() => obj.PackagePrice)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Notes" Variant="Variant.Outlined" @bind-Value="obj.Notes" For="@(() => obj.Notes)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudNumericField Label="DownPayment" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.DownPayment" For="@(() => obj.DownPayment)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudNumericField Label="AdditionalCharges" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.AdditionalCharges" For="@(() => obj.AdditionalCharges)" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudNumericField Label="Balance" Adornment="Adornment.Start" AdornmentText="₱" HideSpinButtons="true" Format="N2" Variant="Variant.Outlined" @bind-Value="obj.Balance" For="@(() => obj.Balance)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudIcon Icon="@Icons.Filled.Email" class="mr-3"></MudIcon>
                                        <MudText>Guest's Invitation Email Template</MudText>
                                        <MudBadge Content="@obj.Guests.Where(g => !g.InvitationSent).Count()" Color="Color.Secondary" Overlap="true" Class="ml-auto mx-6">
                                            <MudTooltip Text="Send pending invitations">
                                                <MudIconButton Icon="@Icons.Outlined.Email" OnClick="SendInvitation" Style="margin: 0; padding: 0;" />
                                            </MudTooltip>
                                        </MudBadge>
                                        <MudTooltip Text="Resend invitation" Class="ml-2">
                                            <MudIconButton Icon="@Icons.Outlined.MarkEmailRead" OnClick="ResendInvitation" Style="margin: 0; padding: 0;" />
                                        </MudTooltip>
                                        <MudText Class="ml-2"></MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <MudTextField Label="Email Subject" Variant="Variant.Outlined" @bind-Value="obj.EmailSubject" For="@(() => obj.EmailSubject)" />
                                    <SfRichTextEditor @bind-Value="@obj.EmailTemplate">
                                        <RichTextEditorToolbarSettings Items="@Tools" />
                                        <RichTextEditorImageSettings SaveFormat="SaveFormat.Base64" />
                                    </SfRichTextEditor>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                    <MudItem xs="12">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudIcon Icon="@Icons.Filled.Book" class="mr-3"></MudIcon>
                                        <MudText>Program</MudText>
                                        <MudIconButton Icon="@Icons.Filled.Print" Class="ml-auto" OnClick="PrintPlan" Style="margin: 0; padding: 0;">Budget Form</MudIconButton>
                                        <MudText Class="ml-2"></MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <SfRichTextEditor @bind-Value="@obj.Plan" @ref="RtePlan">
                                        <RichTextEditorToolbarSettings Items="@Tools" />
                                        <RichTextEditorImageSettings SaveFormat="SaveFormat.Base64" />
                                    </SfRichTextEditor>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                    <MudItem xs="12">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudIcon Icon="@Icons.Filled.AttachFile" class="mr-3"></MudIcon>
                                        <MudText>Files (@obj.Attachments.Count)</MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <div class="title-action">
                                        <MudText></MudText>
                                        <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />
                                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.FileUpload" for="fileInput">Upload Files</MudButton>
                                    </div>
                                    @if (obj.Attachments != null)
                                    {
                                        <MudText Typo="@Typo.h6">@obj.Attachments.Count() File@(obj.Attachments.Count() == 1 ? "" : "s"):</MudText>
                                        <MudList>
                                            @foreach (var attachment in obj.Attachments)
                                            {
                                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@attachment">
                                                    <MudItem>
                                                        @attachment.Name
                                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="@(e => DeleteAttachment(@attachment))"></MudIconButton>
                                                        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Primary" @onclick="@(e => DownloadAttachment(@attachment))"></MudIconButton>
                                                    </MudItem>
                                                </MudListItem>
                                            }
                                        </MudList>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudBadge Content="@obj.Guests.Count" Color="Color.Secondary" Overlap="true" Class="ml-2">
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Info" StartIcon="@Icons.Filled.AssignmentInd" @onclick="@(e => ViewGuests(@obj.Id))">Guests</MudButton>
                </MudBadge>
                <MudBadge Content="@obj.Suppliers.Count" Color="Color.Secondary" Overlap="true" Class="ml-2">
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Info" StartIcon="@Icons.Filled.AssignmentTurnedIn" @onclick="@(e => ViewSuppliers(@obj.Id))">Suppliers</MudButton>
                </MudBadge>
            </MudCardActions>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" StartIcon="@Icons.Filled.Print" Class="ml-2" OnClick="PrintA">Budget Form</MudButton>
                <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" StartIcon="@Icons.Filled.Print" Class="ml-2" OnClick="PrintB">Checklist</MudButton>
                <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" StartIcon="@Icons.Filled.Print" Class="ml-2" OnClick="PrintC">Guest List</MudButton>
            </MudCardActions>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Filled.Save" Class="ml-auto">Save</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
    <div hidden>
        <SfRichTextEditor @bind-Value="@Report" @ref="RteObj" />
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    SfRichTextEditor RtePlan;
    SfRichTextEditor RteObj;
    string Report = "";
    Event obj = new Event();
    IEnumerable<EventType> Types = null;
    IEnumerable<Package> Packages = null;

    async Task PrintPlan()
        => await RtePlan.PrintAsync();

    async Task PrintA()
    {
        Report = await ReportService.GetBudgetForm(obj.Id);
        await RteObj.PrintAsync();
    }

    async Task PrintB()
    {
        Report = await ReportService.GetChecklist(obj.Id);
        await RteObj.PrintAsync();
    }

    async Task PrintC()
    {
        Report = await ReportService.GetGuestList(obj.Id);
        await RteObj.PrintAsync();
    }

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    protected override async Task OnInitializedAsync()
    {
        Types = await Task.Run(() => eventTypeService.GetAll());
        Packages = await Task.Run(() => packageService.GetAll());
        obj = await Task.Run(() => eventService.GetOne(Guid.Parse(Id)));
    }

    protected async void Update()
    {
        await eventService.UpdateOne(obj);
        NavigationManager.NavigateTo("events");
    }

    void Cancel()
        => NavigationManager.NavigateTo("events");

    IList<IBrowserFile> files = new List<IBrowserFile>();
    async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        await attachmentService.UpdateFiles<Event>(obj.Id, files);
        files.Clear();
    }

    async Task DeleteAttachment(Attachment attachment)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await attachmentService.DeleteFile(attachment);
        }
    }

    async Task DownloadAttachment(Attachment attachment)
    {
        var fileStream = await attachmentService.GetFile(attachment);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", attachment.Name, streamRef);
    }

    void ViewGuests(Guid eventId)
        => NavigationManager.NavigateTo($"/event/{eventId}/guests");

    void ViewSuppliers(Guid eventId)
        => NavigationManager.NavigateTo($"/event/{eventId}/suppliers");

    async Task SendInvitation()
    {
        await EmailService.SendInvitations(obj.Id, false, null);
        NavigationManager.NavigateTo($"/event/{obj.Id}");
    }

    async Task ResendInvitation()
        => await EmailService.SendInvitations(obj.Id, true, null);

}
