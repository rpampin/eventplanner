@page "/events"
@using EventPlanner.Models.ModelView
@using EventPlanner.Data
@inject EventService EventService
@inject NavigationManager NavigationManager

<div class="title-action">
    <MudText Typo="Typo.h2">Events</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="New">New Event</MudButton>
</div>

@if (Events is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <MudTable Items="@Events" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Type</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Celebrant</MudTh>
            <MudTh>Mobile</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Package</MudTh>
            <MudTh>DownPayment</MudTh>
            <MudTh>Balance</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Date">@context.Date.Value.ToShortDateString()</MudTd>
            <MudTd DataLabel="Celebrant">@context.Celebrant</MudTd>
            <MudTd DataLabel="Mobile">@context.Mobile</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Package">@context.Package.Name</MudTd>
            <MudTd DataLabel="DownPayment">₱@context.DownPayment</MudTd>
            <MudTd DataLabel="Balance">₱@context.Balance</MudTd>
            <MudTd DataLabel="Edit" class="fit">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" Class="ma-2" @onclick="@(e => Edit(@context.Id))"></MudIconButton>
            </MudTd>
            <MudTd DataLabel="Delete" class="fit">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="ma-2" @onclick="@(e => Delete(@context.Id))"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    IEnumerable<EvenListView> Events;

    protected override async Task OnInitializedAsync()
    {
        Events = await Task.Run(() => EventService.GetAll());
    }

    protected async void Delete(Guid id)
    {
        await EventService.DeleteOne(id);
        NavigationManager.NavigateTo("events", true);
    }

    protected void New()
        => NavigationManager.NavigateTo("event", true);

    protected void Edit(Guid Id)
        => NavigationManager.NavigateTo("event/" + Id, true);
}
