@page "/events"
@using EventPlanner.Models.ModelView
@using EventPlanner.Data
@inject EventService EventService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-8">
        <h3>Events</h3>
    </div>
    <div class="col-md-4" style="text-align: end">
        <a type="button" class="btn btn-primary" href="event">
            <span class="oi oi-plus"> NEW EVENT</span>
        </a>
    </div>
</div>

@if (Events is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Type</th>
                <th>Date</th>
                <th>Celebrant</th>
                <th>Mobile</th>
                <th>Email</th>
                <th>Package</th>
                <th>DownPayment</th>
                <th>Balance</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in Events)
            {
                <tr>
                    <td>@ev.Type</td>
                    <td>@ev.Date</td>
                    <td>@ev.Celebrant</td>
                    <td>@ev.Mobile</td>
                    <td>@ev.Email</td>
                    <td>@ev.Package</td>
                    <td>@ev.DownPayment</td>
                    <td>@ev.Balance</td>
                    <td class="fit">
                        <a type="button" class="btn btn-link" href="event/@ev.Id">
                            <span class="oi oi-pencil"></span>
                        </a>
                    </td>
                    <td class="fit">
                        <button type="button" class="btn btn-link" @onclick="@(e => Delete(@ev.Id))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    IEnumerable<EvenListView> Events;

    protected override async Task OnInitializedAsync()
    {
        Events = await Task.Run(() => EventService.GetAll());
    }

    protected async void Delete(Guid id)
    {
        await EventService.DeleteOne(id);
        NavigationManager.NavigateTo("events", true);
    }

}
