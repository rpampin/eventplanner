@page "/"
@page "/events"
@using EventPlanner.Models.ModelView
@using EventPlanner.Data
@inject IJSRuntime JS
@inject EventService EventService
@inject NavigationManager NavigationManager
@inject AppState AppState
<Loading IsLoading="AppState.IsLoading" />

<MudGrid Justify="Justify.FlexEnd">
    <MudItem xs="8">
        <MudText Typo="Typo.h2">Events</MudText>
    </MudItem>
    <MudItem xs="2" Style="align-self: center;">
        <MudCheckBox @bind-Checked="@ShowPastEvents" Label="Inclue past events" onclick="Toggle()"></MudCheckBox>
    </MudItem>
    <MudItem xs="2" Style="align-self: center;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="New" type="button">New Event</MudButton>
    </MudItem>
</MudGrid>

@if (Events is null)
{
    <Loading IsLoading="true" />
}
else
{
    <MudTable Items="@Events" OnRowClick="Edit" T="EventListView" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Type</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Celebrant</MudTh>
            <MudTh>Mobile</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Package</MudTh>
            <MudTh>DownPayment</MudTh>
            <MudTh>Balance</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Date">@context.Date.Value.ToShortDateString()</MudTd>
            <MudTd DataLabel="Celebrant">@context.Celebrant</MudTd>
            <MudTd DataLabel="Mobile">@context.Mobile</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Package">@context.Package.Name</MudTd>
            <MudTd DataLabel="DownPayment">₱@context.DownPayment</MudTd>
            <MudTd DataLabel="Balance">₱@context.Balance</MudTd>
            <MudTd DataLabel="Delete" class="fit">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="ma-2" @onclick="@(e => Delete(@context.Id))"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    bool ShowPastEvents;
    IEnumerable<EventListView> Events = null;

    protected override async Task OnInitializedAsync()
    {
        Events = await EventService.GetAllPending();
    }

    async Task Toggle()
    {
        await AppState.RunAsync(async () =>
        {
            if (!ShowPastEvents)
                Events = await EventService.GetAll();
            else
                Events = await EventService.GetAllPending();
        });
    }

    async Task Delete(Guid id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await AppState.RunAsync(async () =>
            {
                await EventService.DeleteOne(id);
                NavigationManager.NavigateTo("events", true);
            });
        }
    }

    protected void New()
        => NavigationManager.NavigateTo("event", true);

    private void Edit(TableRowClickEventArgs<EventListView> args)
        => NavigationManager.NavigateTo("event/" + args.Item.Id, true);

    }
