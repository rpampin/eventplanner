@page "/send-email"
@using EventPlanner.Models
@using EventPlanner.Data
@inject EmailService EmailService
@inject NavigationManager NavigationManager
@inject AppState AppState
<Loading IsLoading="AppState.IsLoading" />

<div class="title-action">
    <MudText Typo="Typo.h2">New Event Type</MudText>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Filled.RemoveCircle" Color="Color.Transparent" OnClick="Clean"> Clean</MudButton>
</div>

<EditForm Model="@obj" OnValidSubmit="Send">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Subject" Variant="Variant.Outlined" @bind-Value="obj.Subject" For="@(() => obj.Subject)" />
            <MudTextField Label="To" Variant="Variant.Outlined" @bind-Value="obj.To" For="@(() => obj.To)" />
            <MudTextField Label="Cc" Variant="Variant.Outlined" @bind-Value="obj.Cc" For="@(() => obj.Cc)" />
            <MudTextField Label="Bcc" Variant="Variant.Outlined" @bind-Value="obj.Bcc" For="@(() => obj.Bcc)" />
            <SfRichTextEditor @bind-Value="@obj.Body">
                <RichTextEditorToolbarSettings Items="@Tools" />
                <RichTextEditorImageSettings SaveFormat="SaveFormat.Base64" />
            </SfRichTextEditor>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Send" Class="ml-auto">Send</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    Email obj = new();

    void Clean()
        => NavigationManager.NavigateTo("send-email", true);

    async Task Send()
    {
        await AppState.RunAsync(async () =>
        {
            await EmailService.SendEmail(obj);
            NavigationManager.NavigateTo("send-email", true);
        });
    }

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
}
