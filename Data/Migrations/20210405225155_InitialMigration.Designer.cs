// <auto-generated />
using System;
using EventPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210405225155_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("EventPlanner.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Base64")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("EventPlanner.Models.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSignature")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventProgramTemplate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppConfigurations");
                });

            modelBuilder.Entity("EventPlanner.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AdditionalCharges")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Celebrant")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DownPayment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailTemplate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Plan")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreparationTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreparationVenue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceptionTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceptionVenue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Social")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("TypeId");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");
                });

            modelBuilder.Entity("EventPlanner.Models.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("EventPlanner.Models.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InvitationSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Table")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("WillAttend")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("EventPlanner.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("EventPlanner.Models.SmtpConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SmtpConfig");
                });

            modelBuilder.Entity("EventPlanner.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DownPaymentRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FirstDownPayment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OtherPayments")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SecondDownPayment")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ThirdDownPayment")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalDown")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TypeId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("EventPlanner.Models.SupplierType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SupplierTypes");
                });

            modelBuilder.Entity("EventPlanner.Models.Wedding", b =>
                {
                    b.HasBaseType("EventPlanner.Models.Event");

                    b.Property<string>("BrideAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrideEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrideMobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrideName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BrideSocial")
                        .HasColumnType("TEXT");

                    b.Property<string>("CeremonyTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CeremonyVenue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroomAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroomEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroomMobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroomName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroomSocial")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Wedding");
                });

            modelBuilder.Entity("EventPlanner.Models.Attachment", b =>
                {
                    b.HasOne("EventPlanner.Models.Event", "Event")
                        .WithMany("Attachments")
                        .HasForeignKey("EventId");

                    b.HasOne("EventPlanner.Models.Supplier", "Supplier")
                        .WithMany("Attachments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Event");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EventPlanner.Models.Event", b =>
                {
                    b.HasOne("EventPlanner.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.HasOne("EventPlanner.Models.EventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Package");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EventPlanner.Models.Guest", b =>
                {
                    b.HasOne("EventPlanner.Models.Event", "Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPlanner.Models.Supplier", b =>
                {
                    b.HasOne("EventPlanner.Models.Event", "Event")
                        .WithMany("Suppliers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventPlanner.Models.SupplierType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Event");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EventPlanner.Models.Event", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Guests");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("EventPlanner.Models.Supplier", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
